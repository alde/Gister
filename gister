#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

require "optparse"
require "rest_client"
require "json"

##
# The gister object.
class Gister
  attr_accessor :description, :visibility, :files

  def initialize
    @files = Hash.new
  end

  def add_file filename
    @files[filename] = {
      "content" => File.read(filename)
    }
  end

  def to_json(*a)
    hash = {
      "public" => @visibility == :public,
      "files" => @files
    }
    hash["description"] = @description unless @description.empty?
    return hash.to_json(*a)
  end
end

##
# Commandline options.
options = {}
optparse = OptionParser.new do |opts|
  opts.banner = "Usage: gister [option] file1 file2 ..."

  ##
  # Output all of the response
  options[:verbose] = false
  opts.on( "-v", "--verbose", "Output entire response") do
    options[:verbose] = true
  end

  ##
  # Add a description
  options[:description] = ""
  opts.on( "-d", "--description DESC", "Add a description for the gist") do |desc|
    options[:description] = desc
  end

  ##
  # Make the gist private or public
  options[:visibility] = :public
  opts.on( "-p", "--private", "Make the gist private") do
    options[:visibility] = :private
  end

  # Display help text.
  opts.on( "-h", "--help", "Display this screen" ) do
    puts opts
    exit
  end
end

optparse.parse!

##
# If no files were supplied, print the help text and exit.
if ARGV.count == 0
  puts optparse
  exit
end

##
# Create a new instance of the Gister
gister = Gister.new

##
# Add description and visibility
gister.description = options[:description]
gister.visibility = options[:visibility]

##
# Add each file to the gister object
ARGV.each {|file|  gister.add_file file }

##
# Make the call and get the response back.
begin
  response = RestClient.post(
    "https://api.github.com/gists",
    JSON.pretty_generate(gister),
    :content_type => :json
  )
  map = JSON(response)

  ##
  # If verbose flag was supplied, output all the information.
  if (options[:verbose]) then
    map.each_with_index {|k, v| puts "#{k} => #{v.inspect}"}
  else
    puts "url: #{map["html_url"]}"
  end
rescue
  puts "An exception occured when trying to create gists:"
  puts $!, $@
end