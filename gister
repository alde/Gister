#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

require "optparse"
require "rest_client"
require "json"

##
# The gister object.
class Gister
  attr_accessor :description, :visibility, :files, :options

  def initialize args
    @files = Hash.new
    @options, filenames = parse_options args

    ##
    # Add each file to the gister object
    filenames.each {|file|  add_file file }
  end

  def add_file filename
    @files[filename] = {
      "content" => File.read(filename)
    }
  end

  def to_json *a
    hash = {
      "public" => @options[:visibility] == :public,
      "files" => @files
    }
    hash["description"] = @options[:description] unless @options[:description].empty?
    return hash.to_json *a
  end

  def push
    response = RestClient.post("https://api.github.com/gists", JSON.generate(self), :content_type => :json)
    if @options[:verbose] then
      return JSON(response)
    end
    return JSON(response)["html_url"]
  end

  private
  ##
  # Parse commandline options
  def parse_options args
    ##
    # Commandline options.
    options = {}
    optparse = OptionParser.new do |opts|
      opts.banner = "Usage: gister [option] file1 file2 ..."

      ##
      # Output all of the response
      options[:verbose] = false
      opts.on( "-v", "--verbose", "Output entire response") do
        options[:verbose] = true
      end

      ##
      # Add a description
      options[:description] = ""
      opts.on( "-d", "--description DESC", "Add a description for the gist") do |desc|
        options[:description] = desc
      end

      ##
      # Make the gist private or public
      options[:visibility] = :public
      opts.on( "-p", "--private", "Make the gist private") do
        options[:visibility] = :private
      end

      # Display help text.
      opts.on( "-h", "--help", "Display this screen" ) do
        puts opts
        exit
      end
    end

    optparse.parse!

    ##
    # If no files were supplied, print the help text and exit.
    if args.count == 0
      puts optparse
      exit
    end

    return [options, ARGV]
  end
end

##
# Make the call and get the response back.
begin
  puts Gister.new(ARGV).push
rescue
  puts "An exception occured when trying to create gists:"
  puts $!, $@
end